syntax = "proto3";

package api.test;

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "github.com/lyft/protoc-gen-validate/validate/validate.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/infobloxopen/protoc-gen-gorm/options/gorm.proto";
import "github.com/infobloxopen/atlas-app-toolkit/query/collection_operators.proto";
import "github.com/infobloxopen/atlas-app-toolkit/rpc/resource/resource.proto";
import "github.com/infobloxopen/protoc-gen-atlas-query-validate/options/query_validate.proto";
import "github.com/infobloxopen/protoc-gen-atlas-validate/options/atlas_validate.proto";

option go_package = "github.com/seizadi/test/pkg/pb;pb";

// The SecOps service, GetVersion RPC, and Version message
// make up a simple "starter" example. It allows the Atlas CLI to generate an
// end-to-end example for the sake of demonstration. Feel free to change
// GetVersion to better-suit how your versioning system, or get rid of it entirely.

// Here are some helpful resources to aid you in your protobuf quest:
// https://github.com/infobloxopen/atlas-contacts-app/blob/master/proto/contacts.proto
// https://developers.google.com/protocol-buffers/docs/proto
// https://github.com/grpc-ecosystem/grpc-gateway
// https://developers.google.com/protocol-buffers/docs/style

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "TEST";
    version: "1.0";
    contact: {
        name: "Soheil Eizadi";
        url: "https://github.com/seizadi/test";
        email: "seizadi@gmail.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  base_path: "/v1/";
  security_definitions: {
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
      };
    };
  };
  security: {
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    }
  };
};


// ---------------------------------
// TEST Application Version
// ---------------------------------
message VersionResponse {
  string version = 1;
}


// ---------------------------------------------------------
// Application
// ---------------------------------------------------------
message Application {
  option (gorm.opts) = {
      ormable: true,
      multi_account: true
  };

  // The Application identifier.
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial"  primary_key: true}];

  // The name of the Application
  string name = 2;

  // The description of the Application
  string description = 3;

}

message CreateApplicationRequest {
  Application payload = 1;
}

message CreateApplicationResponse {
  Application result = 1;
}

message ReadApplicationRequest {
  atlas.rpc.Identifier id = 1;
  infoblox.api.FieldSelection fields = 2;
}

message ReadApplicationResponse {
  Application result = 1;
}

message UpdateApplicationRequest {
  Application payload = 1;
  google.protobuf.FieldMask fields = 2;
}

message UpdateApplicationResponse {
  Application result = 1;
}

message DeleteApplicationRequest {
  atlas.rpc.Identifier id = 1;
}

message DeleteApplicationResponse {}

message ListApplicationRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListApplicationsResponse {
  repeated Application results = 1;
  infoblox.api.PageInfo page = 2;
}

service Applications {
  option (gorm.server) = {
      autogen: true,
      txn_middleware: true,
    };

  // Use this method to create a Application information.
  rpc Create (CreateApplicationRequest) returns (CreateApplicationResponse) {
    option (google.api.http) = {
            post: "/applications"
            body: "payload"
        };
  }

  // Use this method to read a Application information by identifier.
  rpc Read (ReadApplicationRequest) returns (ReadApplicationResponse) {
    option (google.api.http) = {
            get: "/applications/{id.resource_id}"
        };
  }

  // Use this method to update a Application information.
  rpc Update (UpdateApplicationRequest) returns (UpdateApplicationResponse) {
    option (atlas_validate.method).allow_unknown_fields = false;
    option (google.api.http) = {
            put: "/applications/{payload.id.resource_id}"
            body: "payload"
            additional_bindings: {
                patch: "/applications/{payload.id.resource_id}"
                body: "payload"
            }
    };
  }

  // Use this method to delete a particular Application.
  rpc Delete (DeleteApplicationRequest) returns (DeleteApplicationResponse) {
    option (google.api.http) = {
            delete: "/applications/{id.resource_id}"
        };
    option (gorm.method).object_type = "Application";
  }

  // Use this method to retrieve all the Applications.
  rpc List (ListApplicationRequest) returns (ListApplicationsResponse) {
    option (google.api.http) = {
            get: "/applications"
        };
  }
}

// -------------------------------------------------
// TestEvent
// -------------------------------------------------
message TestEvent {
  option (gorm.opts) = {
      ormable: true,
      multi_account: true
  };

  // The TestEvent identifier.
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial"  primary_key: true}];

  // The name of the TestEvent
  string name = 2;

  // The description of the TestEvent
  string description = 3;

  // The timestamp of the TestEvent
  google.protobuf.Timestamp event_time = 4;

  // Reference to Application
  atlas.rpc.Identifier application_id = 5 [(gorm.field) = {reference_of: "Application", tag: {type: "integer"}}];

}

message CreateTestEventRequest {
  TestEvent payload = 1;
}

message CreateTestEventResponse {
  TestEvent result = 1;
}

message ReadTestEventRequest {
  atlas.rpc.Identifier id = 1;
  infoblox.api.FieldSelection fields = 2;
}

message ReadTestEventResponse {
  TestEvent result = 1;
}

message UpdateTestEventRequest {
  TestEvent payload = 1;
  google.protobuf.FieldMask fields = 2;
}

message UpdateTestEventResponse {
  TestEvent result = 1;
}

message DeleteTestEventRequest {
  atlas.rpc.Identifier id = 1;
}

message DeleteTestEventResponse {}

message ListTestEventRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListTestEventsResponse {
  repeated TestEvent results = 1;
  infoblox.api.PageInfo page = 2;
}

service TestEvents {
  option (gorm.server) = {
      autogen: true,
      txn_middleware: true,
    };

  // Use this method to create a TestEvent information.
  rpc Create (CreateTestEventRequest) returns (CreateTestEventResponse) {
    option (google.api.http) = {
            post: "/test_events"
            body: "payload"
        };
  }

  // Use this method to read a TestEvent information by identifier.
  rpc Read (ReadTestEventRequest) returns (ReadTestEventResponse) {
    option (google.api.http) = {
            get: "/test_events/{id.resource_id}"
        };
  }

  // Use this method to update a TestEvent information.
  rpc Update (UpdateTestEventRequest) returns (UpdateTestEventResponse) {
    option (atlas_validate.method).allow_unknown_fields = false;
    option (google.api.http) = {
            put: "/test_events/{payload.id.resource_id}"
            body: "payload"
            additional_bindings: {
                patch: "/test_events/{payload.id.resource_id}"
                body: "payload"
            }
    };
  }

  // Use this method to delete a particular TestEvent.
  rpc Delete (DeleteTestEventRequest) returns (DeleteTestEventResponse) {
    option (google.api.http) = {
            delete: "/test_events/{id.resource_id}"
        };
    option (gorm.method).object_type = "TestEvent";
  }

  // Use this method to retrieve all the TestEvents.
  rpc List (ListTestEventRequest) returns (ListTestEventsResponse) {
    option (google.api.http) = {
            get: "/test_events"
        };
  }
}
